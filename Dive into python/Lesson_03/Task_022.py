# В большой текстовой строке подсчитать количество встречаемых слов
# и вернуть 10 самых частых. Не учитывать знаки препинания и регистр символов.
# За основу возьмите любую статью из википедии или из документации к языку.
# (Может помочь метод translate из модуля string)


article = 'Для практической реализации квантовых вычислений требуется решить \
сложную задачу: эффективно управлять динамикой квантовых битов (кубитов) при \
наличии внешних шумов. Если бы кубиты были идеально изолированы от окружения, \
то шумов бы не было, однако и воздействовать на эволюцию кубитов было бы \
невозможно, а значит, было бы невозможно выполнить ни один протокол обработки \
квантовой информации. Открытость кубитов к контролирующим воздействиям делает \
их уязвимыми как к шумам управления, так и шумам, вызванным неизбежным \
взаимодействием с окружающими квантовыми объектами (например, примесями и \
паразитными модами излучения). Особую опасность представляют шумы немарковского \
типа, то есть шумы, в которых проявляются эффекты памяти. Их действие на кубиты \
зависит от всех предыдущих состояний кубитов, а значит, учесть их или \
компенсировать их влияние довольно затруднительно. Такие шумы в той или иной \
степени присутствуют во всех современных прототипах квантовых компьютеров, что \
делает борьбу с ними особенно актуальной. Единственный практический способ \
извлечь информацию о квантовой системе измерить ее, но здесь в дело вступает \
фундаментальный закон о невозможности извлечения информации без возмущения \
квантовой системы. При выполнении измерения над системой происходит коллапс \
волновой функции, в результате чего состояние системы после измерения фактически \
никак не связано с состоянием до измерения; теория дает предсказание лишь для \
вероятности обнаружить систему в некотором новом состоянии. Поэтому для \
«восстановления» состояния квантовой системы проводят много различных измерений, \
чтобы собрать достаточно статистической информации. Этот статистический метод \
называется томографией квантовых состояний и требует значительных ресурсов как \
по проведению эксперимента, так и по обработке собранных данных.'
whole_dict: dict = {}


# Очищаем строку от символов и переводим слова в нижний регистр
article_to_list = list(article)

for i in article:
    if not i.isalpha() and not i.isspace():
        article_to_list.remove(i)

clean_article = ''.join(article_to_list).lower()


# Добавляем в результирующий словарь подсчет количества встречаемых слов
list_of_words = clean_article.split()

for word in list_of_words:
    if word not in whole_dict.keys():
        whole_dict[word] = 1
    else:
        whole_dict[word] += 1

# Создаем список топ-10 встречающихся слов
max_values = max(whole_dict.values())

for key, value in whole_dict.items():
    if value == max_values:
        print(f'{key}: {value}')

